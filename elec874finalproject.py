# -*- coding: utf-8 -*-
"""ELEC874FinalProject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N4e8DGzbbcjCYwiuDO4WnofV4czTGq1A

# Initialization
"""

# Commented out IPython magic to ensure Python compatibility.
import os
import torch
import torchvision
import tarfile
import torch.nn as nn
import numpy as np
import torch.nn.functional as F
from torchvision.datasets.utils import download_url
from torchvision.datasets import ImageFolder
from torch.utils.data import DataLoader
from torchvision.transforms import ToTensor
import torchvision.transforms as tt
from torch.utils.data import random_split
from torchvision.utils import make_grid
import matplotlib.pyplot as plt
import torchvision.models as models
# %matplotlib inline

dataset_url = "https://s3.amazonaws.com/fast-ai-imageclas/cifar100.tgz"
download_url(dataset_url,'.')

# Extract from archive
with tarfile.open('./cifar100.tgz', 'r:gz') as tar:
    tar.extractall(path='./data')

data_dir = './data/cifar100'

print(os.listdir(data_dir))
classes = os.listdir(data_dir + "/train")
print(classes)

x=len(os.listdir('./data/cifar100/train'))
print(f"No. of classes: {x}")
y=len(os.listdir('./data/cifar100/train/aquatic_mammals'))
print(f"No. of sub classes in each class: {y}")
z=len(os.listdir('./data/cifar100/train/aquatic_mammals/beaver'))
print(f"Total objects inside a subclass: {z}")

print(f"TRAINING SET CONTAINS {x*y*z} IMAGES")

t=len(os.listdir('./data/cifar100/test'))
print(f"No. of classes: {t}")
u=len(os.listdir('./data/cifar100/test/aquatic_mammals'))
print(f"No. of sub classes in each class: {u}")
v=len(os.listdir('./data/cifar100/test/aquatic_mammals/beaver'))
print(f"Total objects inside a subclass: {v}")

print(f"VALIDATION SET CONTAINS {t*u*v} IMAGES")

def show_example(img, label):
    print('Label: ', dataset.classes[label], "("+str(label)+")")
    plt.imshow(img.permute(1, 2, 0))

dataset = ImageFolder(data_dir+'/train', transform=ToTensor())

show_example(*dataset[22500]) #args use

def show_batch(dl):
    for images, labels in dl:
        fig, ax = plt.subplots(figsize=(12, 12))
        ax.set_xticks([]); ax.set_yticks([])
        ax.imshow(make_grid(images[:64], nrow=8).permute(1, 2, 0))
        break

def get_default_device():
    """Pick GPU if available, else CPU"""
    if torch.cuda.is_available():
        return torch.device('cuda')
    else:
        return torch.device('cpu')

def to_device(data, device):
    """Move tensor(s) to chosen device"""
    if isinstance(data, (list,tuple)):
        return [to_device(x, device) for x in data]
    return data.to(device, non_blocking=True)

class DeviceDataLoader():
    """Wrap a dataloader to move data to a device"""
    def __init__(self, dl, device):
        self.dl = dl
        self.device = device

    def __iter__(self):
        """Yield a batch of data after moving it to device"""
        for b in self.dl:
            yield to_device(b, self.device)

    def __len__(self):
        """Number of batches"""
        return len(self.dl)

# Helper functions

def accuracy(outputs, labels):
    _, preds = torch.max(outputs, dim=1)
    return torch.tensor(torch.sum(preds == labels).item() / len(preds))

class ImageClassificationBase(nn.Module):
    def training_step(self, batch):
        images, labels = batch
        out = self(images)                  # Generate predictions
        loss = F.cross_entropy(out, labels) # Calculate loss
        return loss

    def validation_step(self, batch):
        images, labels = batch
        out = self(images)                    # Generate predictions
        loss = F.cross_entropy(out, labels)   # Calculate loss
        acc = accuracy(out, labels)           # Calculate accuracy
        return {'val_loss': loss.detach(), 'val_acc': acc}

    def validation_epoch_end(self, outputs):
        batch_losses = [x['val_loss'] for x in outputs]
        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses
        batch_accs = [x['val_acc'] for x in outputs]
        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies
        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}

    def epoch_end(self, epoch, result):
        print("Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}".format(
            epoch, result['train_loss'], result['val_loss'], result['val_acc']))

def init_weights(m):
  if type(m) == nn.Linear:
    torch.nn.init.xavier_uniform_(m.weight)
    m.bias.data.fill_(0.01)

def plot_accuracies(history_1):
    accuracies = [x['val_acc'] for x in history_1]
    plt.plot(accuracies, '-x')
    plt.xlabel('Epochs')
    plt.ylabel('Accuracy')
    #plt.title('Validation Accuracy vs. No. of epochs');

def plot_losses(history_1):
    train_losses = [x.get('train_loss') for x in history_1]
    val_losses = [x['val_loss'] for x in history]
    plt.plot(train_losses, '-bx')
    plt.plot(val_losses, '-rx')
    plt.xlabel('Epochs')
    plt.ylabel('Loss')
    plt.legend(['Training', 'Validation'])
    #plt.title('Loss vs. No. of epochs');

def plot_lrs(history_1):
    lrs = np.concatenate([x.get('lrs', []) for x in history_1])
    plt.plot(lrs)
    plt.xlabel('Batch no.')
    plt.ylabel('Learning rate')
    plt.title('Learning Rate vs. Batch no.');

"""# ResNet18 - from torchvisions.models"""

# Data transforms (normalization & data augmentation)
stats = ((0.5071, 0.4865, 0.449), (0.267, 0.256, 0.276))
train_tfms = tt.Compose([tt.RandomCrop(32, padding=4, padding_mode='reflect'),
                         tt.RandomHorizontalFlip(),
                         tt.ToTensor(),
                         tt.Normalize(*stats,inplace=True)])
valid_tfms = tt.Compose([tt.ToTensor(), tt.Normalize(*stats)])

# PyTorch datasets
train_ds = ImageFolder(data_dir+'/train', train_tfms)
valid_ds = ImageFolder(data_dir+'/test', valid_tfms)
test_ds = ImageFolder(data_dir+'/test', valid_tfms)

batch_size = 128

# PyTorch data loaders
train_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=2, pin_memory=True)
valid_dl = DataLoader(valid_ds, batch_size*2, num_workers=2, pin_memory=True)

device = get_default_device()
device

train_dl = DeviceDataLoader(train_dl, device)
valid_dl = DeviceDataLoader(valid_dl, device)

"""## Architecture"""

class CIFAR100Resnet18(ImageClassificationBase):
        def __init__(self, in_channels, num_classes):
                super().__init__()
                self.network = torchvision.models.resnet18()
                num_ftrs = self.network.fc.in_features
                self.network.fc = nn.Linear(num_ftrs, 100)

        def forward(self, xb):
                return self.network(xb)

model = to_device(CIFAR100Resnet18(3,100),device)

"""from torchsummary import summary
summary(model, (3, 32, 32))
"""

@torch.no_grad()
def evaluate(model, val_loader):
    model.eval()
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)

def get_lr(optimizer):
    for param_group in optimizer.param_groups:
        return param_group['lr']

def fit_one_cycle(epochs, max_lr, model, train_loader, val_loader,
                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):
    torch.cuda.empty_cache()
    history = []

    # Set up cutom optimizer with weight decay
    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)
    # Set up one-cycle learning rate scheduler
    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs,
                                                steps_per_epoch=len(train_loader))

    for epoch in range(epochs):
        # Training Phase
        model.train()
        train_losses = []
        lrs = []
        for batch in train_loader:
            loss = model.training_step(batch)
            train_losses.append(loss)
            loss.backward()

            # Gradient clipping
            if grad_clip:
                nn.utils.clip_grad_value_(model.parameters(), grad_clip)

            optimizer.step()
            optimizer.zero_grad()

            # Record & update learning rate
            lrs.append(get_lr(optimizer))
            sched.step()

        # Validation phase
        result = evaluate(model, val_loader)
        result['train_loss'] = torch.stack(train_losses).mean().item()
        result['lrs'] = lrs
        model.epoch_end(epoch, result)
        history.append(result)
    return history

history = [evaluate(model, valid_dl)]
history

model.apply(init_weights)

epochs = 50
max_lr = 0.01
grad_clip = 0.1
weight_decay = 1e-4
opt_func = torch.optim.SGD

"""## Results"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history += fit_one_cycle(epochs, max_lr, model, train_dl, valid_dl,
#                          weight_decay = weight_decay,
#                          opt_func = opt_func)

plot_accuracies(history)

plot_losses(history)

"""# ResNet18 - from scratch (LR = 0.1)"""

# Data transforms (normalization & data augmentation)
stats = ((0.5071, 0.4865, 0.449), (0.267, 0.256, 0.276))
train_tfms = tt.Compose([tt.RandomCrop(32, padding=4, padding_mode='reflect'),
                         tt.RandomHorizontalFlip(),
                         tt.ToTensor(),
                         tt.Normalize(*stats,inplace=True)])
valid_tfms = tt.Compose([tt.ToTensor(),
                         tt.Normalize(*stats, inplace=True)])

# PyTorch datasets
train_ds = ImageFolder(data_dir+'/train', train_tfms)
valid_ds = ImageFolder(data_dir+'/test', valid_tfms)

batch_size = 256

# PyTorch data loaders
train_dl = DataLoader(train_ds, batch_size, shuffle=True)
valid_dl = DataLoader(valid_ds, batch_size*2, shuffle=False)

device = get_default_device()
device

train_dl = DeviceDataLoader(train_dl, device)
valid_dl = DeviceDataLoader(valid_dl, device)

"""## Architecture"""

class ResNet18(ImageClassificationBase):
    def __init__(self, in_channels, num_classes):
        super().__init__()

        # Initial layers
        self.conv_init = nn.Sequential(nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False),
                                       nn.BatchNorm2d(64),
                                       nn.ReLU(inplace=True),
                                       nn.MaxPool2d(kernel_size=3, stride=2, padding=1))

        self.relu = nn.ReLU()

        # Residual layer 1
        self.res1_block1 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64),
                                  nn.ReLU(),
                                  nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64))

        self.res1_block2 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64),
                                  nn.ReLU(),
                                  nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64))

        # Residual layer 2
        self.res2_block1 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        self.res2_block2 = nn.Sequential(nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_1 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=1, stride=2, padding=0, bias=False),
                                       nn.BatchNorm2d(128))


        # Residual layer 3
        self.res3_block1 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        self.res3_block2 = nn.Sequential(nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_2 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=1, stride=2, padding=0, bias=False),
                                       nn.BatchNorm2d(256))

        # Residual layer 4
        self.res4_block1 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        self.res4_block2 = nn.Sequential(nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_3 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=1, stride=2, padding=0, bias=False),
                                        nn.BatchNorm2d(512))

        # Classifier
        self.classifier = nn.Sequential(nn.AdaptiveAvgPool2d(output_size=1),
                                        nn.Flatten(start_dim=1, end_dim=-1),
                                        nn.Linear(in_features=512, out_features=100, bias=True))

    def forward(self, x):
      # Initial layers
      out = self.conv_init(x)

      # Layer 1
      res1b1_out = self.res1_block1(out)
      res1b2_out = self.res1_block2(res1b1_out)
      out = res1b2_out + out
      out = self.relu(out)

      # Layer 2
      res2b1_out = self.res2_block1(out)
      res2b2_out = self.res2_block2(res2b1_out)
      out = self.conv1x1_1(out)
      out = res2b2_out + out
      out = self.relu(out)

      # Layer 3
      res3b1_out = self.res3_block1(out)
      res3b2_out = self.res3_block2(res3b1_out)
      out = self.conv1x1_2(out)
      out = res3b2_out + out
      out = self.relu(out)

      # Layer 4
      res4b1_out = self.res4_block1(out)
      res4b2_out = self.res4_block2(res4b1_out)
      out = self.conv1x1_3(out)
      out = res4b2_out + out
      out = self.relu(out)

      # Classification
      out = self.classifier(out)

      return out

model = to_device(ResNet18(3,100),device)

from torchsummary import summary
summary(model, (3, 32, 32))

@torch.no_grad()
def evaluate(model, val_loader):
    model.eval()
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)

def get_lr(optimizer):
    for param_group in optimizer.param_groups:
        return param_group['lr']

def fit(epochs, max_lr, model, train_loader, val_loader,
                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):
    torch.cuda.empty_cache()
    history = []

    # Set up cutom optimizer with weight decay
    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)
    # Set up one-cycle learning rate scheduler
    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs,
                                                steps_per_epoch=len(train_loader))

    for epoch in range(epochs):
        # Training Phase
        model.train()
        train_losses = []
        lrs = []
        for batch in train_loader:
            loss = model.training_step(batch)
            train_losses.append(loss)
            loss.backward()

            # Gradient clipping
            if grad_clip:
                nn.utils.clip_grad_value_(model.parameters(), grad_clip)

            optimizer.step()
            optimizer.zero_grad()

            # Record & update learning rate
            lrs.append(get_lr(optimizer))
            sched.step()

        # Validation phase
        result = evaluate(model, val_loader)
        result['train_loss'] = torch.stack(train_losses).mean().item()
        result['lrs'] = lrs
        model.epoch_end(epoch, result)
        history.append(result)
    return history

model.apply(init_weights)

history = [evaluate(model, valid_dl)]
history

epochs = 25
max_lr = 0.1
weight_decay = 1e-4
opt_func = torch.optim.SGD

"""## Results"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history += fit(epochs, max_lr, model, train_dl, valid_dl,
#                          weight_decay = weight_decay,
#                          opt_func = opt_func)

plot_accuracies(history)

plot_losses(history)

"""# ResNet 18 - Decrease LR to 0.01"""

# Data transforms (normalization & data augmentation)
stats = ((0.5071, 0.4865, 0.449), (0.267, 0.256, 0.276))
train_tfms = tt.Compose([tt.RandomCrop(32, padding=4, padding_mode='reflect'),
                         tt.RandomHorizontalFlip(),
                         tt.ToTensor(),
                         tt.Normalize(*stats,inplace=True)])
valid_tfms = tt.Compose([tt.ToTensor(),
                         tt.Normalize(*stats, inplace=True)])

# PyTorch datasets
train_ds = ImageFolder(data_dir+'/train', train_tfms)
valid_ds = ImageFolder(data_dir+'/test', valid_tfms)

batch_size = 256

# PyTorch data loaders
train_dl = DataLoader(train_ds, batch_size, shuffle=True)
valid_dl = DataLoader(valid_ds, batch_size*2, shuffle=False)

device = get_default_device()
device

train_dl = DeviceDataLoader(train_dl, device)
valid_dl = DeviceDataLoader(valid_dl, device)

"""## Architecture"""

class ResNet18(ImageClassificationBase):
    def __init__(self, in_channels, num_classes):
        super().__init__()

        # Initial layers
        self.conv_init = nn.Sequential(nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False),
                                       nn.BatchNorm2d(64),
                                       nn.ReLU(inplace=True),
                                       nn.MaxPool2d(kernel_size=3, stride=2, padding=1))

        self.relu = nn.ReLU()

        # Residual layer 1
        self.res1_block1 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64),
                                  nn.ReLU(),
                                  nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64))

        self.res1_block2 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64),
                                  nn.ReLU(),
                                  nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64))

        # Residual layer 2
        self.res2_block1 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        self.res2_block2 = nn.Sequential(nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_1 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=1, stride=2, padding=0, bias=False),
                                       nn.BatchNorm2d(128))


        # Residual layer 3
        self.res3_block1 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        self.res3_block2 = nn.Sequential(nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_2 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=1, stride=2, padding=0, bias=False),
                                       nn.BatchNorm2d(256))

        # Residual layer 4
        self.res4_block1 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        self.res4_block2 = nn.Sequential(nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_3 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=1, stride=2, padding=0, bias=False),
                                        nn.BatchNorm2d(512))

        # Classifier
        self.classifier = nn.Sequential(nn.AdaptiveAvgPool2d(output_size=1),
                                        nn.Flatten(start_dim=1, end_dim=-1),
                                        nn.Linear(in_features=512, out_features=100, bias=True))

    def forward(self, x):
      # Initial layers
      out = self.conv_init(x)

      # Layer 1
      res1b1_out = self.res1_block1(out)
      res1b2_out = self.res1_block2(res1b1_out)
      out = res1b2_out + out
      out = self.relu(out)

      # Layer 2
      res2b1_out = self.res2_block1(out)
      res2b2_out = self.res2_block2(res2b1_out)
      out = self.conv1x1_1(out)
      out = res2b2_out + out
      out = self.relu(out)

      # Layer 3
      res3b1_out = self.res3_block1(out)
      res3b2_out = self.res3_block2(res3b1_out)
      out = self.conv1x1_2(out)
      out = res3b2_out + out
      out = self.relu(out)

      # Layer 4
      res4b1_out = self.res4_block1(out)
      res4b2_out = self.res4_block2(res4b1_out)
      out = self.conv1x1_3(out)
      out = res4b2_out + out
      out = self.relu(out)

      # Classification
      out = self.classifier(out)

      return out

model = to_device(ResNet18(3,100),device)

from torchsummary import summary
summary(model, (3, 32, 32))

@torch.no_grad()
def evaluate(model, val_loader):
    model.eval()
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)

def get_lr(optimizer):
    for param_group in optimizer.param_groups:
        return param_group['lr']

def fit(epochs, max_lr, model, train_loader, val_loader,
                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):
    torch.cuda.empty_cache()
    history = []

    # Set up cutom optimizer with weight decay
    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)
    # Set up one-cycle learning rate scheduler
    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs,
                                                steps_per_epoch=len(train_loader))

    for epoch in range(epochs):
        # Training Phase
        model.train()
        train_losses = []
        lrs = []
        for batch in train_loader:
            loss = model.training_step(batch)
            train_losses.append(loss)
            loss.backward()

            # Gradient clipping
            if grad_clip:
                nn.utils.clip_grad_value_(model.parameters(), grad_clip)

            optimizer.step()
            optimizer.zero_grad()

            # Record & update learning rate
            lrs.append(get_lr(optimizer))
            sched.step()

        # Validation phase
        result = evaluate(model, val_loader)
        result['train_loss'] = torch.stack(train_losses).mean().item()
        result['lrs'] = lrs
        model.epoch_end(epoch, result)
        history.append(result)
    return history

model.apply(init_weights)

history = [evaluate(model, valid_dl)]
history

epochs = 25
max_lr = 0.01
weight_decay = 1e-4
opt_func = torch.optim.SGD

"""## Results"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history += fit(epochs, max_lr, model, train_dl, valid_dl,
#                          weight_decay = weight_decay,
#                          opt_func = opt_func)

plot_accuracies(history)

plot_losses(history)



"""# ResNet 18 - Decrease LR to 0.001"""

# Data transforms (normalization & data augmentation)
stats = ((0.5071, 0.4865, 0.449), (0.267, 0.256, 0.276))
train_tfms = tt.Compose([tt.RandomCrop(32, padding=4, padding_mode='reflect'),
                         tt.RandomHorizontalFlip(),
                         tt.ToTensor(),
                         tt.Normalize(*stats,inplace=True)])
valid_tfms = tt.Compose([tt.ToTensor(),
                         tt.Normalize(*stats, inplace=True)])

# PyTorch datasets
train_ds = ImageFolder(data_dir+'/train', train_tfms)
valid_ds = ImageFolder(data_dir+'/test', valid_tfms)

batch_size = 256

# PyTorch data loaders
train_dl = DataLoader(train_ds, batch_size, shuffle=True)
valid_dl = DataLoader(valid_ds, batch_size*2, shuffle=False)

device = get_default_device()
device

train_dl = DeviceDataLoader(train_dl, device)
valid_dl = DeviceDataLoader(valid_dl, device)

"""## Architecture"""

class ResNet18(ImageClassificationBase):
    def __init__(self, in_channels, num_classes):
        super().__init__()

        # Initial layers
        self.conv_init = nn.Sequential(nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False),
                                       nn.BatchNorm2d(64),
                                       nn.ReLU(inplace=True),
                                       nn.MaxPool2d(kernel_size=3, stride=2, padding=1))

        self.relu = nn.ReLU()

        # Residual layer 1
        self.res1_block1 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64),
                                  nn.ReLU(),
                                  nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64))

        self.res1_block2 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64),
                                  nn.ReLU(),
                                  nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64))

        # Residual layer 2
        self.res2_block1 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        self.res2_block2 = nn.Sequential(nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_1 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=1, stride=2, padding=0, bias=False),
                                       nn.BatchNorm2d(128))


        # Residual layer 3
        self.res3_block1 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        self.res3_block2 = nn.Sequential(nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_2 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=1, stride=2, padding=0, bias=False),
                                       nn.BatchNorm2d(256))

        # Residual layer 4
        self.res4_block1 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        self.res4_block2 = nn.Sequential(nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_3 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=1, stride=2, padding=0, bias=False),
                                        nn.BatchNorm2d(512))

        # Classifier
        self.classifier = nn.Sequential(nn.AdaptiveAvgPool2d(output_size=1),
                                        nn.Flatten(start_dim=1, end_dim=-1),
                                        nn.Linear(in_features=512, out_features=100, bias=True))

    def forward(self, x):
      # Initial layers
      out = self.conv_init(x)

      # Layer 1
      res1b1_out = self.res1_block1(out)
      res1b2_out = self.res1_block2(res1b1_out)
      out = res1b2_out + out
      out = self.relu(out)

      # Layer 2
      res2b1_out = self.res2_block1(out)
      res2b2_out = self.res2_block2(res2b1_out)
      out = self.conv1x1_1(out)
      out = res2b2_out + out
      out = self.relu(out)

      # Layer 3
      res3b1_out = self.res3_block1(out)
      res3b2_out = self.res3_block2(res3b1_out)
      out = self.conv1x1_2(out)
      out = res3b2_out + out
      out = self.relu(out)

      # Layer 4
      res4b1_out = self.res4_block1(out)
      res4b2_out = self.res4_block2(res4b1_out)
      out = self.conv1x1_3(out)
      out = res4b2_out + out
      out = self.relu(out)

      # Classification
      out = self.classifier(out)

      return out

model = to_device(ResNet18(3,100),device)

from torchsummary import summary
summary(model, (3, 32, 32))

@torch.no_grad()
def evaluate(model, val_loader):
    model.eval()
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)

def get_lr(optimizer):
    for param_group in optimizer.param_groups:
        return param_group['lr']

def fit(epochs, max_lr, model, train_loader, val_loader,
                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):
    torch.cuda.empty_cache()
    history = []

    # Set up cutom optimizer with weight decay
    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)
    # Set up one-cycle learning rate scheduler
    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs,
                                                steps_per_epoch=len(train_loader))

    for epoch in range(epochs):
        # Training Phase
        model.train()
        train_losses = []
        lrs = []
        for batch in train_loader:
            loss = model.training_step(batch)
            train_losses.append(loss)
            loss.backward()

            # Gradient clipping
            if grad_clip:
                nn.utils.clip_grad_value_(model.parameters(), grad_clip)

            optimizer.step()
            optimizer.zero_grad()

            # Record & update learning rate
            lrs.append(get_lr(optimizer))
            sched.step()

        # Validation phase
        result = evaluate(model, val_loader)
        result['train_loss'] = torch.stack(train_losses).mean().item()
        result['lrs'] = lrs
        model.epoch_end(epoch, result)
        history.append(result)
    return history

model.apply(init_weights)

history = [evaluate(model, valid_dl)]
history

epochs = 25
max_lr = 0.001
weight_decay = 1e-4
opt_func = torch.optim.SGD

"""## Results"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history += fit(epochs, max_lr, model, train_dl, valid_dl,
#                          weight_decay = weight_decay,
#                          opt_func = opt_func)

plot_accuracies(history)

plot_losses(history)

"""# ResNet18 CIFAR100 w/o batch norm"""

# Data transforms (normalization & data augmentation)
stats = ((0.5071, 0.4865, 0.449), (0.267, 0.256, 0.276))
train_tfms = tt.Compose([tt.RandomCrop(32, padding=4, padding_mode='reflect'),
                         tt.RandomHorizontalFlip(),
                         tt.ToTensor(),
                         tt.Normalize(*stats,inplace=True)])
valid_tfms = tt.Compose([tt.ToTensor(), tt.Normalize(*stats)])

# PyTorch datasets
train_ds = ImageFolder(data_dir+'/train', train_tfms)
valid_ds = ImageFolder(data_dir+'/test', valid_tfms)
test_ds = ImageFolder(data_dir+'/test', valid_tfms)

batch_size = 256

# PyTorch data loaders
train_dl = DataLoader(train_ds, batch_size, shuffle=True,)
valid_dl = DataLoader(valid_ds, batch_size*2, shuffle=False)

for images, _ in train_dl:
    print('images.shape:', images.shape)
    plt.figure(figsize=(32,32))
    plt.axis('off')
    plt.imshow(make_grid(images, nrow=20).permute((1, 2, 0)))
    break

show_batch(train_dl)

device = get_default_device()
device

train_dl = DeviceDataLoader(train_dl, device)
valid_dl = DeviceDataLoader(valid_dl, device)

"""## Architecture"""

class ResNet18(ImageClassificationBase):
    def __init__(self, in_channels, num_classes):
        super().__init__()

        # Initial layers
        self.conv_init = nn.Sequential(nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False),
                                       nn.ReLU(inplace=True),
                                       nn.MaxPool2d(kernel_size=3, stride=2, padding=1))

        self.relu = nn.ReLU()

        # Residual layer 1
        self.res1_block1 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.ReLU(),
                                  nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False))

        self.res1_block2 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.ReLU(),
                                  nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False))

        # Residual layer 2
        self.res2_block1 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.ReLU(),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False))

        self.res2_block2 = nn.Sequential(nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.ReLU(),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_1 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=1, stride=2, padding=0, bias=False))


        # Residual layer 3
        self.res3_block1 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.ReLU(),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False))

        self.res3_block2 = nn.Sequential(nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.ReLU(),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_2 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=1, stride=2, padding=0, bias=False))

        # Residual layer 4
        self.res4_block1 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.ReLU(),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False))

        self.res4_block2 = nn.Sequential(nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.ReLU(),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_3 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=1, stride=2, padding=0, bias=False))

        # Classifier
        self.classifier = nn.Sequential(nn.AdaptiveAvgPool2d(output_size=1),
                                        nn.Flatten(start_dim=1, end_dim=-1),
                                        nn.Linear(in_features=512, out_features=100, bias=True))

    def forward(self, x):
      # Initial layers
      out = self.conv_init(x)

      # Layer 1
      res1b1_out = self.res1_block1(out)
      res1b2_out = self.res1_block2(res1b1_out)
      out = res1b2_out + out
      out = self.relu(out)

      # Layer 2
      res2b1_out = self.res2_block1(out)
      res2b2_out = self.res2_block2(res2b1_out)
      out = self.conv1x1_1(out)
      out = res2b2_out + out
      out = self.relu(out)

      # Layer 3
      res3b1_out = self.res3_block1(out)
      res3b2_out = self.res3_block2(res3b1_out)
      out = self.conv1x1_2(out)
      out = res3b2_out + out
      out = self.relu(out)

      # Layer 4
      res4b1_out = self.res4_block1(out)
      res4b2_out = self.res4_block2(res4b1_out)
      out = self.conv1x1_3(out)
      out = res4b2_out + out
      out = self.relu(out)

      # Classification
      out = self.classifier(out)

      return out

model = to_device(ResNet18(3,100),device)

from torchsummary import summary
summary(model, (3, 32, 32))

@torch.no_grad()
def evaluate(model, val_loader):
    model.eval()
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)

def get_lr(optimizer):
    for param_group in optimizer.param_groups:
        return param_group['lr']

def fit_one_cycle(epochs, max_lr, model, train_loader, val_loader,
                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):
    torch.cuda.empty_cache()
    history = []

    # Set up cutom optimizer with weight decay
    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)
    # Set up one-cycle learning rate scheduler
    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs,
                                                steps_per_epoch=len(train_loader))

    for epoch in range(epochs):
        # Training Phase
        model.train()
        train_losses = []
        lrs = []
        for batch in train_loader:
            loss = model.training_step(batch)
            train_losses.append(loss)
            loss.backward()

            # Gradient clipping
            if grad_clip:
                nn.utils.clip_grad_value_(model.parameters(), grad_clip)

            optimizer.step()
            optimizer.zero_grad()

            # Record & update learning rate
            lrs.append(get_lr(optimizer))
            sched.step()

        # Validation phase
        result = evaluate(model, val_loader)
        result['train_loss'] = torch.stack(train_losses).mean().item()
        result['lrs'] = lrs
        model.epoch_end(epoch, result)
        history.append(result)
    return history

history = [evaluate(model, valid_dl)]
history

model.apply(init_weights)

epochs = 25
max_lr = 0.01
weight_decay = 1e-4
opt_func = torch.optim.SGD

"""## Results"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history += fit(epochs, max_lr, model, train_dl, valid_dl,
#                weight_decay = weight_decay,
#                opt_func = opt_func)

plot_accuracies(history)

plot_losses(history)

plot_lrs(history)

"""# ResNet 18 CIFAR100 - w/ Dropout

## Architecture
"""

class ResNet18(ImageClassificationBase):
    def __init__(self, in_channels, num_classes):
        super().__init__()

        # Initial layers
        self.conv_init = nn.Sequential(nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False),
                                       nn.BatchNorm2d(64),
                                       nn.ReLU(inplace=True),
                                       nn.MaxPool2d(kernel_size=3, stride=2, padding=1))

        self.relu = nn.ReLU()

        # Residual layer 1
        self.res1_block1 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64),
                                  nn.ReLU(),
                                  nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64))

        self.res1_block2 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64),
                                  nn.ReLU(),
                                  nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64))

        # Residual layer 2
        self.res2_block1 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        self.res2_block2 = nn.Sequential(nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_1 = nn.Conv2d(64, 128, kernel_size=1, stride=2, padding=0, bias=False)


        # Residual layer 3
        self.res3_block1 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        self.res3_block2 = nn.Sequential(nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_2 = nn.Conv2d(128, 256, kernel_size=1, stride=2, padding=0, bias=False)

        # Residual layer 4
        self.res4_block1 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        self.res4_block2 = nn.Sequential(nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_3 = nn.Conv2d(256, 512, kernel_size=1, stride=2, padding=0, bias=False)

        # Classifier
        self.classifier = nn.Sequential(nn.AdaptiveAvgPool2d(output_size=1),
                                        nn.Flatten(start_dim=1, end_dim=-1),
                                        nn.Dropout(p=0.5),
                                        nn.Linear(in_features=512, out_features=100, bias=True))

    def forward(self, x):
      # Initial layers
      out = self.conv_init(x)

      # Layer 1
      res1b1_out = self.res1_block1(out)
      res1b2_out = self.res1_block2(res1b1_out)
      out = res1b2_out + out
      out = self.relu(out)

      # Layer 2
      res2b1_out = self.res2_block1(out)
      res2b2_out = self.res2_block2(res2b1_out)
      out = self.conv1x1_1(out)
      out = res2b2_out + out
      out = self.relu(out)

      # Layer 3
      res3b1_out = self.res3_block1(out)
      res3b2_out = self.res3_block2(res3b1_out)
      out = self.conv1x1_2(out)
      out = res3b2_out + out
      out = self.relu(out)

      # Layer 4
      res4b1_out = self.res4_block1(out)
      res4b2_out = self.res4_block2(res4b1_out)
      out = self.conv1x1_3(out)
      out = res4b2_out + out
      out = self.relu(out)

      # Classification
      out = self.classifier(out)

      return out

model = to_device(ResNet18(3,100),device)

from torchsummary import summary
summary(model, (3, 32, 32))

model.apply(init_weights)

history = [evaluate(model, valid_dl)]
history

epochs = 25
max_lr = 0.01
weight_decay = 1e-4
opt_func = torch.optim.SGD

"""## Results"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history += fit_one_cycle(epochs, max_lr, model, train_dl, valid_dl,
#                          weight_decay = weight_decay,
#                          opt_func = opt_func)
# 
#

plot_accuracies(history)

plot_losses(history)



"""# ResNet 18 CIFAR100 - w/ Dropout everywhere

## Architecture
"""

class ResNet18(ImageClassificationBase):
    def __init__(self, in_channels, num_classes):
        super().__init__()

        # Initial layers
        self.conv_init = nn.Sequential(nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False),
                                       nn.BatchNorm2d(64),
                                       nn.ReLU(inplace=True),
                                       nn.Dropout(p=0.2),
                                       nn.MaxPool2d(kernel_size=3, stride=2, padding=1))

        self.relu = nn.ReLU()

        # Residual layer 1
        self.res1_block1 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64),
                                  nn.ReLU(),
                                  nn.Dropout(p=0.2),
                                  nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64))

        self.res1_block2 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64),
                                  nn.ReLU(),
                                  nn.Dropout(p=0.2),
                                  nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64))

        # Residual layer 2
        self.res2_block1 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Dropout(p=0.2),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        self.res2_block2 = nn.Sequential(nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Dropout(p=0.2),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_1 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=1, stride=2, padding=0, bias=False),
                                       nn.BatchNorm2d(128),
                                       nn.Dropout(p=0.2))


        # Residual layer 3
        self.res3_block1 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Dropout(p=0.2),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        self.res3_block2 = nn.Sequential(nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Dropout(p=0.2),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_2 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=1, stride=2, padding=0, bias=False),
                                       nn.BatchNorm2d(256),
                                       nn.Dropout(p=0.2))

        # Residual layer 4
        self.res4_block1 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Dropout(p=0.2),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        self.res4_block2 = nn.Sequential(nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Dropout(p=0.2),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_3 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=1, stride=2, padding=0, bias=False),
                                       nn.BatchNorm2d(512),
                                       nn.Dropout(p=0.2))

        # Classifier
        self.classifier = nn.Sequential(nn.AdaptiveAvgPool2d(output_size=1),
                                        nn.Flatten(start_dim=1, end_dim=-1),
                                        nn.Dropout(p=0.5),
                                        nn.Linear(in_features=512, out_features=100, bias=True))

    def forward(self, x):
      # Initial layers
      out = self.conv_init(x)

      # Layer 1
      res1b1_out = self.res1_block1(out)
      res1b2_out = self.res1_block2(res1b1_out)
      out = res1b2_out + out
      out = self.relu(out)

      # Layer 2
      res2b1_out = self.res2_block1(out)
      res2b2_out = self.res2_block2(res2b1_out)
      out = self.conv1x1_1(out)
      out = res2b2_out + out
      out = self.relu(out)

      # Layer 3
      res3b1_out = self.res3_block1(out)
      res3b2_out = self.res3_block2(res3b1_out)
      out = self.conv1x1_2(out)
      out = res3b2_out + out
      out = self.relu(out)

      # Layer 4
      res4b1_out = self.res4_block1(out)
      res4b2_out = self.res4_block2(res4b1_out)
      out = self.conv1x1_3(out)
      out = res4b2_out + out
      out = self.relu(out)

      # Classification
      out = self.classifier(out)

      return out

model = to_device(ResNet18(3,100),device)

from torchsummary import summary
summary(model, (3, 32, 32))

model.apply(init_weights)

history = [evaluate(model, valid_dl)]
history

epochs = 25
max_lr = 0.01
weight_decay = 1e-4
opt_func = torch.optim.SGD

"""## Results"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history += fit(epochs, max_lr, model, train_dl, valid_dl,
#                          weight_decay = weight_decay,
#                          opt_func = opt_func)
# 
#

plot_accuracies(history)

plot_losses(history)

"""# ResNet18 - Transfer Learning"""

# Data transforms (normalization & data augmentation)
stats = ((0.5071, 0.4865, 0.449), (0.267, 0.256, 0.276))
train_tfms = tt.Compose([tt.RandomCrop(32, padding=4, padding_mode='reflect'),
                         tt.RandomHorizontalFlip(),
                         tt.ToTensor(),
                         tt.Normalize(*stats,inplace=True)])
valid_tfms = tt.Compose([tt.ToTensor(), tt.Normalize(*stats)])

# PyTorch datasets
train_ds = ImageFolder(data_dir+'/train', train_tfms)
valid_ds = ImageFolder(data_dir+'/test', valid_tfms)
test_ds = ImageFolder(data_dir+'/test', valid_tfms)

batch_size = 128

# PyTorch data loaders
train_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=2, pin_memory=True)
valid_dl = DataLoader(valid_ds, batch_size*2, num_workers=2, pin_memory=True)

device = get_default_device()
device

train_dl = DeviceDataLoader(train_dl, device)
valid_dl = DeviceDataLoader(valid_dl, device)

"""## Architecture"""

class CIFAR100Resnet18(ImageClassificationBase):
        def __init__(self, in_channels, num_classes):
                super().__init__()
                self.network = torchvision.models.resnet18(pretrained=True)
                num_ftrs = self.network.fc.in_features
                self.network.fc = nn.Linear(num_ftrs, 100)

        def forward(self, xb):
                return self.network(xb)

model = to_device(CIFAR100Resnet18(3,100),device)

from torchsummary import summary
summary(model, (3, 32, 32))

@torch.no_grad()
def evaluate(model, val_loader):
    model.eval()
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)

def get_lr(optimizer):
    for param_group in optimizer.param_groups:
        return param_group['lr']

def fit_one_cycle(epochs, max_lr, model, train_loader, val_loader,
                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):
    torch.cuda.empty_cache()
    history = []

    # Set up cutom optimizer with weight decay
    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)
    # Set up one-cycle learning rate scheduler
    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs,
                                                steps_per_epoch=len(train_loader))

    for epoch in range(epochs):
        # Training Phase
        model.train()
        train_losses = []
        lrs = []
        for batch in train_loader:
            loss = model.training_step(batch)
            train_losses.append(loss)
            loss.backward()

            # Gradient clipping
            if grad_clip:
                nn.utils.clip_grad_value_(model.parameters(), grad_clip)

            optimizer.step()
            optimizer.zero_grad()

            # Record & update learning rate
            lrs.append(get_lr(optimizer))
            sched.step()

        # Validation phase
        result = evaluate(model, val_loader)
        result['train_loss'] = torch.stack(train_losses).mean().item()
        result['lrs'] = lrs
        model.epoch_end(epoch, result)
        history.append(result)
    return history

history = [evaluate(model, valid_dl)]
history

model.apply(init_weights)

epochs = 25
max_lr = 0.01
grad_clip = 0.1
weight_decay = 1e-4
opt_func = torch.optim.SGD

"""## Results"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history += fit_one_cycle(epochs, max_lr, model, train_dl, valid_dl,
#                          weight_decay = weight_decay,
#                          opt_func = opt_func)

plot_accuracies(history)

plot_losses(history)

"""# ResNet 18 - Use 3x3 conv residuals"""

# Data transforms (normalization & data augmentation)
stats = ((0.5071, 0.4865, 0.449), (0.267, 0.256, 0.276))
train_tfms = tt.Compose([tt.RandomCrop(32, padding=4, padding_mode='reflect'),
                         tt.RandomHorizontalFlip(),
                         tt.ToTensor(),
                         tt.Normalize(*stats,inplace=True)])
valid_tfms = tt.Compose([tt.ToTensor(),
                         tt.Normalize(*stats, inplace=True)])

# PyTorch datasets
train_ds = ImageFolder(data_dir+'/train', train_tfms)
valid_ds = ImageFolder(data_dir+'/test', valid_tfms)

batch_size = 256

# PyTorch data loaders
train_dl = DataLoader(train_ds, batch_size, shuffle=True)
valid_dl = DataLoader(valid_ds, batch_size*2, shuffle=False)

device = get_default_device()
device

train_dl = DeviceDataLoader(train_dl, device)
valid_dl = DeviceDataLoader(valid_dl, device)

"""## Architecture"""

class ResNet18(ImageClassificationBase):
    def __init__(self, in_channels, num_classes):
        super().__init__()

        # Initial layers
        self.conv_init = nn.Sequential(nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False),
                                       nn.BatchNorm2d(64),
                                       nn.ReLU(inplace=True),
                                       nn.MaxPool2d(kernel_size=3, stride=2, padding=1))

        self.relu = nn.ReLU()

        # Residual layer 1
        self.res1_block1 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64),
                                  nn.ReLU(),
                                  nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64))

        self.res1_block2 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64),
                                  nn.ReLU(),
                                  nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64))

        # Residual layer 2
        self.res2_block1 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        self.res2_block2 = nn.Sequential(nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        # 1x1 increase channel depth, downsample image
        self.conv3x3_1 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1, bias=False),
                                       nn.BatchNorm2d(128))


        # Residual layer 3
        self.res3_block1 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        self.res3_block2 = nn.Sequential(nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        # 1x1 increase channel depth, downsample image
        self.conv3x3_2 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1, bias=False),
                                       nn.BatchNorm2d(256))

        # Residual layer 4
        self.res4_block1 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        self.res4_block2 = nn.Sequential(nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        # 1x1 increase channel depth, downsample image
        self.conv3x3_3 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1, bias=False),
                                        nn.BatchNorm2d(512))

        # Classifier
        self.classifier = nn.Sequential(nn.AdaptiveAvgPool2d(output_size=1),
                                        nn.Flatten(start_dim=1, end_dim=-1),
                                        nn.Linear(in_features=512, out_features=100, bias=True))

    def forward(self, x):
      # Initial layers
      out = self.conv_init(x)

      # Layer 1
      res1b1_out = self.res1_block1(out)
      res1b2_out = self.res1_block2(res1b1_out)
      out = res1b2_out + out
      out = self.relu(out)

      # Layer 2
      res2b1_out = self.res2_block1(out)
      res2b2_out = self.res2_block2(res2b1_out)
      out = self.conv3x3_1(out)
      out = res2b2_out + out
      out = self.relu(out)

      # Layer 3
      res3b1_out = self.res3_block1(out)
      res3b2_out = self.res3_block2(res3b1_out)
      out = self.conv3x3_2(out)
      out = res3b2_out + out
      out = self.relu(out)

      # Layer 4
      res4b1_out = self.res4_block1(out)
      res4b2_out = self.res4_block2(res4b1_out)
      out = self.conv3x3_3(out)
      out = res4b2_out + out
      out = self.relu(out)

      # Classification
      out = self.classifier(out)

      return out

model = to_device(ResNet18(3,100),device)

from torchsummary import summary
summary(model, (3, 32, 32))

@torch.no_grad()
def evaluate(model, val_loader):
    model.eval()
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)

def get_lr(optimizer):
    for param_group in optimizer.param_groups:
        return param_group['lr']

def fit(epochs, max_lr, model, train_loader, val_loader,
                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):
    torch.cuda.empty_cache()
    history = []

    # Set up cutom optimizer with weight decay
    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)
    # Set up one-cycle learning rate scheduler
    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs,
                                                steps_per_epoch=len(train_loader))

    for epoch in range(epochs):
        # Training Phase
        model.train()
        train_losses = []
        lrs = []
        for batch in train_loader:
            loss = model.training_step(batch)
            train_losses.append(loss)
            loss.backward()

            # Gradient clipping
            if grad_clip:
                nn.utils.clip_grad_value_(model.parameters(), grad_clip)

            optimizer.step()
            optimizer.zero_grad()

            # Record & update learning rate
            lrs.append(get_lr(optimizer))
            sched.step()

        # Validation phase
        result = evaluate(model, val_loader)
        result['train_loss'] = torch.stack(train_losses).mean().item()
        result['lrs'] = lrs
        model.epoch_end(epoch, result)
        history.append(result)
    return history

model.apply(init_weights)

history = [evaluate(model, valid_dl)]
history

epochs = 25
max_lr = 0.01
weight_decay = 1e-4
opt_func = torch.optim.SGD

"""## Results"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history += fit(epochs, max_lr, model, train_dl, valid_dl,
#                          weight_decay = weight_decay,
#                          opt_func = opt_func)

plot_accuracies(history)

plot_losses(history)



"""# ResNet 18 - Pre-activation (BN-ReLU-Conv)"""

# Data transforms (normalization & data augmentation)
stats = ((0.5071, 0.4865, 0.449), (0.267, 0.256, 0.276))
train_tfms = tt.Compose([tt.RandomCrop(32, padding=4, padding_mode='reflect'),
                         tt.RandomHorizontalFlip(),
                         tt.ToTensor(),
                         tt.Normalize(*stats,inplace=True)])
valid_tfms = tt.Compose([tt.ToTensor(),
                         tt.Normalize(*stats, inplace=True)])

# PyTorch datasets
train_ds = ImageFolder(data_dir+'/train', train_tfms)
valid_ds = ImageFolder(data_dir+'/test', valid_tfms)

batch_size = 256

# PyTorch data loaders
train_dl = DataLoader(train_ds, batch_size, shuffle=True)
valid_dl = DataLoader(valid_ds, batch_size*2, shuffle=False)

device = get_default_device()
device

train_dl = DeviceDataLoader(train_dl, device)
valid_dl = DeviceDataLoader(valid_dl, device)

"""## Architecture"""

class ResNet18(ImageClassificationBase):
    def __init__(self, in_channels, num_classes):
        super().__init__()

        # Initial layers
        self.conv_init = nn.Sequential(nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False),
                                       nn.BatchNorm2d(64),
                                       nn.ReLU(inplace=True),
                                       nn.MaxPool2d(kernel_size=3, stride=2, padding=1))

        self.relu = nn.ReLU()

        # Residual layer 1
        self.res1_block1 = nn.Sequential(nn.BatchNorm2d(64),
                                         nn.ReLU(),
                                         nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                         nn.BatchNorm2d(64),
                                         nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False))

        self.res1_block2 = nn.Sequential(nn.BatchNorm2d(64),
                                         nn.ReLU(),
                                         nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                         nn.BatchNorm2d(64),
                                         nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False))

        # Residual layer 2
        self.res2_block1 = nn.Sequential(nn.BatchNorm2d(64),
                                  nn.ReLU(),
                                  nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False))


        self.res2_block2 = nn.Sequential(nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_1 = nn.Sequential(nn.BatchNorm2d(64),
                                       nn.Conv2d(64, 128, kernel_size=1, stride=2, padding=0, bias=False))


        # Residual layer 3
        self.res3_block1 = nn.Sequential(nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False))

        self.res3_block2 = nn.Sequential(nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_2 = nn.Sequential(nn.BatchNorm2d(128),
                                       nn.Conv2d(128, 256, kernel_size=1, stride=2, padding=0, bias=False))

        # Residual layer 4
        self.res4_block1 = nn.Sequential(nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False))

        self.res4_block2 = nn.Sequential(nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_3 = nn.Sequential(nn.BatchNorm2d(256),
                                       nn.Conv2d(256, 512, kernel_size=1, stride=2, padding=0, bias=False))

        # Classifier
        self.classifier = nn.Sequential(nn.AdaptiveAvgPool2d(output_size=1),
                                        nn.Flatten(start_dim=1, end_dim=-1),
                                        nn.Linear(in_features=512, out_features=100, bias=True))

    def forward(self, x):
      # Initial layers
      out = self.conv_init(x)

      # Layer 1
      res1b1_out = self.res1_block1(out)
      res1b2_out = self.res1_block2(res1b1_out)
      out = res1b2_out + out
      out = self.relu(out)

      # Layer 2
      res2b1_out = self.res2_block1(out)
      res2b2_out = self.res2_block2(res2b1_out)
      out = self.conv1x1_1(out)
      out = res2b2_out + out
      out = self.relu(out)

      # Layer 3
      res3b1_out = self.res3_block1(out)
      res3b2_out = self.res3_block2(res3b1_out)
      out = self.conv1x1_2(out)
      out = res3b2_out + out
      out = self.relu(out)

      # Layer 4
      res4b1_out = self.res4_block1(out)
      res4b2_out = self.res4_block2(res4b1_out)
      out = self.conv1x1_3(out)
      out = res4b2_out + out
      out = self.relu(out)

      # Classification
      out = self.classifier(out)

      return out

model = to_device(ResNet18(3,100),device)

from torchsummary import summary
summary(model, (3, 32, 32))

@torch.no_grad()
def evaluate(model, val_loader):
    model.eval()
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)

def get_lr(optimizer):
    for param_group in optimizer.param_groups:
        return param_group['lr']

def fit(epochs, max_lr, model, train_loader, val_loader,
                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):
    torch.cuda.empty_cache()
    history = []

    # Set up cutom optimizer with weight decay
    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)
    # Set up one-cycle learning rate scheduler
    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs,
                                                steps_per_epoch=len(train_loader))

    for epoch in range(epochs):
        # Training Phase
        model.train()
        train_losses = []
        lrs = []
        for batch in train_loader:
            loss = model.training_step(batch)
            train_losses.append(loss)
            loss.backward()

            # Gradient clipping
            if grad_clip:
                nn.utils.clip_grad_value_(model.parameters(), grad_clip)

            optimizer.step()
            optimizer.zero_grad()

            # Record & update learning rate
            lrs.append(get_lr(optimizer))
            sched.step()

        # Validation phase
        result = evaluate(model, val_loader)
        result['train_loss'] = torch.stack(train_losses).mean().item()
        result['lrs'] = lrs
        model.epoch_end(epoch, result)
        history.append(result)
    return history

model.apply(init_weights)

history = [evaluate(model, valid_dl)]
history

epochs = 25
max_lr = 0.01
weight_decay = 1e-4
opt_func = torch.optim.SGD

"""## Results"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history += fit(epochs, max_lr, model, train_dl, valid_dl,
#                          weight_decay = weight_decay,
#                          opt_func = opt_func)

plot_accuracies(history)

plot_losses(history)

"""# ResNet 18 - Adam Optimizer"""

# Data transforms (normalization & data augmentation)
stats = ((0.5071, 0.4865, 0.449), (0.267, 0.256, 0.276))
train_tfms = tt.Compose([tt.RandomCrop(32, padding=4, padding_mode='reflect'),
                         tt.RandomHorizontalFlip(),
                         tt.ToTensor(),
                         tt.Normalize(*stats,inplace=True)])
valid_tfms = tt.Compose([tt.ToTensor(),
                         tt.Normalize(*stats, inplace=True)])

# PyTorch datasets
train_ds = ImageFolder(data_dir+'/train', train_tfms)
valid_ds = ImageFolder(data_dir+'/test', valid_tfms)

batch_size = 256

# PyTorch data loaders
train_dl = DataLoader(train_ds, batch_size, shuffle=True)
valid_dl = DataLoader(valid_ds, batch_size*2, shuffle=False)

device = get_default_device()
device

train_dl = DeviceDataLoader(train_dl, device)
valid_dl = DeviceDataLoader(valid_dl, device)

"""## Architecture"""

class ResNet18(ImageClassificationBase):
    def __init__(self, in_channels, num_classes):
        super().__init__()

        # Initial layers
        self.conv_init = nn.Sequential(nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False),
                                       nn.BatchNorm2d(64),
                                       nn.ReLU(inplace=True),
                                       nn.MaxPool2d(kernel_size=3, stride=2, padding=1))

        self.relu = nn.ReLU()

        # Residual layer 1
        self.res1_block1 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64),
                                  nn.ReLU(),
                                  nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64))

        self.res1_block2 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64),
                                  nn.ReLU(),
                                  nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64))

        # Residual layer 2
        self.res2_block1 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        self.res2_block2 = nn.Sequential(nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_1 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=1, stride=2, padding=0, bias=False),
                                       nn.BatchNorm2d(128))


        # Residual layer 3
        self.res3_block1 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        self.res3_block2 = nn.Sequential(nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_2 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=1, stride=2, padding=0, bias=False),
                                       nn.BatchNorm2d(256))

        # Residual layer 4
        self.res4_block1 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        self.res4_block2 = nn.Sequential(nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_3 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=1, stride=2, padding=0, bias=False),
                                        nn.BatchNorm2d(512))

        # Classifier
        self.classifier = nn.Sequential(nn.AdaptiveAvgPool2d(output_size=1),
                                        nn.Flatten(start_dim=1, end_dim=-1),
                                        nn.Linear(in_features=512, out_features=100, bias=True))

    def forward(self, x):
      # Initial layers
      out = self.conv_init(x)

      # Layer 1
      res1b1_out = self.res1_block1(out)
      res1b2_out = self.res1_block2(res1b1_out)
      out = res1b2_out + out
      out = self.relu(out)

      # Layer 2
      res2b1_out = self.res2_block1(out)
      res2b2_out = self.res2_block2(res2b1_out)
      out = self.conv1x1_1(out)
      out = res2b2_out + out
      out = self.relu(out)

      # Layer 3
      res3b1_out = self.res3_block1(out)
      res3b2_out = self.res3_block2(res3b1_out)
      out = self.conv1x1_2(out)
      out = res3b2_out + out
      out = self.relu(out)

      # Layer 4
      res4b1_out = self.res4_block1(out)
      res4b2_out = self.res4_block2(res4b1_out)
      out = self.conv1x1_3(out)
      out = res4b2_out + out
      out = self.relu(out)

      # Classification
      out = self.classifier(out)

      return out

model = to_device(ResNet18(3,100),device)

from torchsummary import summary
summary(model, (3, 32, 32))

@torch.no_grad()
def evaluate(model, val_loader):
    model.eval()
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)

def get_lr(optimizer):
    for param_group in optimizer.param_groups:
        return param_group['lr']

def fit(epochs, max_lr, model, train_loader, val_loader,
                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):
    torch.cuda.empty_cache()
    history = []

    # Set up cutom optimizer with weight decay
    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)
    # Set up one-cycle learning rate scheduler
    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs,
                                                steps_per_epoch=len(train_loader))

    for epoch in range(epochs):
        # Training Phase
        model.train()
        train_losses = []
        lrs = []
        for batch in train_loader:
            loss = model.training_step(batch)
            train_losses.append(loss)
            loss.backward()

            # Gradient clipping
            if grad_clip:
                nn.utils.clip_grad_value_(model.parameters(), grad_clip)

            optimizer.step()
            optimizer.zero_grad()

            # Record & update learning rate
            lrs.append(get_lr(optimizer))
            sched.step()

        # Validation phase
        result = evaluate(model, val_loader)
        result['train_loss'] = torch.stack(train_losses).mean().item()
        result['lrs'] = lrs
        model.epoch_end(epoch, result)
        history.append(result)
    return history

model.apply(init_weights)

history = [evaluate(model, valid_dl)]
history

epochs = 25
max_lr = 0.01
weight_decay = 1e-4
opt_func = torch.optim.Adam

"""## Results"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history += fit(epochs, max_lr, model, train_dl, valid_dl,
#                          weight_decay = weight_decay,
#                          opt_func = opt_func)

plot_accuracies(history)

plot_losses(history)

"""# ResNet 18 - Adam Optimizer + Grad clipping

# New section
"""

# Data transforms (normalization & data augmentation)
stats = ((0.5071, 0.4865, 0.449), (0.267, 0.256, 0.276))
train_tfms = tt.Compose([tt.RandomCrop(32, padding=4, padding_mode='reflect'),
                         tt.RandomHorizontalFlip(),
                         tt.ToTensor(),
                         tt.Normalize(*stats,inplace=True)])
valid_tfms = tt.Compose([tt.ToTensor(),
                         tt.Normalize(*stats, inplace=True)])

# PyTorch datasets
train_ds = ImageFolder(data_dir+'/train', train_tfms)
valid_ds = ImageFolder(data_dir+'/test', valid_tfms)

batch_size = 256

# PyTorch data loaders
train_dl = DataLoader(train_ds, batch_size, shuffle=True)
valid_dl = DataLoader(valid_ds, batch_size*2, shuffle=False)

device = get_default_device()
device

train_dl = DeviceDataLoader(train_dl, device)
valid_dl = DeviceDataLoader(valid_dl, device)

"""## Architecture"""

class ResNet18(ImageClassificationBase):
    def __init__(self, in_channels, num_classes):
        super().__init__()

        # Initial layers
        self.conv_init = nn.Sequential(nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False),
                                       nn.BatchNorm2d(64),
                                       nn.ReLU(inplace=True),
                                       nn.MaxPool2d(kernel_size=3, stride=2, padding=1))

        self.relu = nn.ReLU()

        # Residual layer 1
        self.res1_block1 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64),
                                  nn.ReLU(),
                                  nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64))

        self.res1_block2 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64),
                                  nn.ReLU(),
                                  nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64))

        # Residual layer 2
        self.res2_block1 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        self.res2_block2 = nn.Sequential(nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_1 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=1, stride=2, padding=0, bias=False),
                                       nn.BatchNorm2d(128))


        # Residual layer 3
        self.res3_block1 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        self.res3_block2 = nn.Sequential(nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_2 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=1, stride=2, padding=0, bias=False),
                                       nn.BatchNorm2d(256))

        # Residual layer 4
        self.res4_block1 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        self.res4_block2 = nn.Sequential(nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_3 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=1, stride=2, padding=0, bias=False),
                                        nn.BatchNorm2d(512))

        # Classifier
        self.classifier = nn.Sequential(nn.AdaptiveAvgPool2d(output_size=1),
                                        nn.Flatten(start_dim=1, end_dim=-1),
                                        nn.Linear(in_features=512, out_features=100, bias=True))

    def forward(self, x):
      # Initial layers
      out = self.conv_init(x)

      # Layer 1
      res1b1_out = self.res1_block1(out)
      res1b2_out = self.res1_block2(res1b1_out)
      out = res1b2_out + out
      out = self.relu(out)

      # Layer 2
      res2b1_out = self.res2_block1(out)
      res2b2_out = self.res2_block2(res2b1_out)
      out = self.conv1x1_1(out)
      out = res2b2_out + out
      out = self.relu(out)

      # Layer 3
      res3b1_out = self.res3_block1(out)
      res3b2_out = self.res3_block2(res3b1_out)
      out = self.conv1x1_2(out)
      out = res3b2_out + out
      out = self.relu(out)

      # Layer 4
      res4b1_out = self.res4_block1(out)
      res4b2_out = self.res4_block2(res4b1_out)
      out = self.conv1x1_3(out)
      out = res4b2_out + out
      out = self.relu(out)

      # Classification
      out = self.classifier(out)

      return out

model = to_device(ResNet18(3,100),device)

from torchsummary import summary
summary(model, (3, 32, 32))

@torch.no_grad()
def evaluate(model, val_loader):
    model.eval()
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)

def get_lr(optimizer):
    for param_group in optimizer.param_groups:
        return param_group['lr']

def fit(epochs, max_lr, model, train_loader, val_loader,
                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):
    torch.cuda.empty_cache()
    history = []

    # Set up cutom optimizer with weight decay
    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)
    # Set up one-cycle learning rate scheduler
    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs,
                                                steps_per_epoch=len(train_loader))

    for epoch in range(epochs):
        # Training Phase
        model.train()
        train_losses = []
        lrs = []
        for batch in train_loader:
            loss = model.training_step(batch)
            train_losses.append(loss)
            loss.backward()

            # Gradient clipping
            if grad_clip:
                nn.utils.clip_grad_value_(model.parameters(), grad_clip)

            optimizer.step()
            optimizer.zero_grad()

            # Record & update learning rate
            lrs.append(get_lr(optimizer))
            sched.step()

        # Validation phase
        result = evaluate(model, val_loader)
        result['train_loss'] = torch.stack(train_losses).mean().item()
        result['lrs'] = lrs
        model.epoch_end(epoch, result)
        history.append(result)
    return history

model.apply(init_weights)

history = [evaluate(model, valid_dl)]
history

epochs = 25
max_lr = 0.01
weight_decay = 1e-4
grad_clip = 0.1
opt_func = torch.optim.SGD

"""## Results"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history += fit(epochs, max_lr, model, train_dl, valid_dl,
#                weight_decay = weight_decay,
#                grad_clip = grad_clip,
#                opt_func = opt_func)

plot_accuracies(history)

plot_losses(history)



"""# ResNet 18 - WideResNet"""

# Data transforms (normalization & data augmentation)
stats = ((0.5071, 0.4865, 0.449), (0.267, 0.256, 0.276))
train_tfms = tt.Compose([tt.RandomCrop(32, padding=4, padding_mode='reflect'),
                         tt.RandomHorizontalFlip(),
                         tt.ToTensor(),
                         tt.Normalize(*stats,inplace=True)])
valid_tfms = tt.Compose([tt.ToTensor(),
                         tt.Normalize(*stats, inplace=True)])

# PyTorch datasets
train_ds = ImageFolder(data_dir+'/train', train_tfms)
valid_ds = ImageFolder(data_dir+'/test', valid_tfms)

batch_size = 256

# PyTorch data loaders
train_dl = DataLoader(train_ds, batch_size, shuffle=True)
valid_dl = DataLoader(valid_ds, batch_size*2, shuffle=False)

device = get_default_device()
device

train_dl = DeviceDataLoader(train_dl, device)
valid_dl = DeviceDataLoader(valid_dl, device)

"""## Architecture"""

class ResNet18(ImageClassificationBase):
    def __init__(self, in_channels, num_classes):
        super().__init__()

        # Initial layers
        self.conv_init = nn.Sequential(nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False),
                                       nn.BatchNorm2d(64),
                                       nn.ReLU(inplace=True),
                                       nn.MaxPool2d(kernel_size=3, stride=2, padding=1))

        self.relu = nn.ReLU()

        # Residual layer 1
        self.res1_block1 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        self.res1_block2 = nn.Sequential(nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_0 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=1, stride=1, padding=0, bias=False),
                                       nn.BatchNorm2d(128))

        # Residual layer 2
        self.res2_block1 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        self.res2_block2 = nn.Sequential(nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_1 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=1, stride=2, padding=0, bias=False),
                                       nn.BatchNorm2d(256))


        # Residual layer 3
        self.res3_block1 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        self.res3_block2 = nn.Sequential(nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_2 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=1, stride=2, padding=0, bias=False),
                                       nn.BatchNorm2d(512))

        # Residual layer 4
        self.res4_block1 = nn.Sequential(nn.Conv2d(512, 1024, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(1024),
                                  nn.ReLU(),
                                  nn.Conv2d(1024, 1024, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(1024))

        self.res4_block2 = nn.Sequential(nn.Conv2d(1024, 1024, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(1024),
                                  nn.ReLU(),
                                  nn.Conv2d(1024, 1024, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(1024))

        # 1x1 increase channel depth, downsample image
        self.conv1x1_3 = nn.Sequential(nn.Conv2d(512, 1024, kernel_size=1, stride=2, padding=0, bias=False),
                                        nn.BatchNorm2d(1024))

        # Classifier
        self.classifier = nn.Sequential(nn.AdaptiveAvgPool2d(output_size=1),
                                        nn.Flatten(start_dim=1, end_dim=-1),
                                        nn.Linear(in_features=1024, out_features=100, bias=True))

    def forward(self, x):
      # Initial layers
      out = self.conv_init(x)

      # Layer 1
      res1b1_out = self.res1_block1(out)
      res1b2_out = self.res1_block2(res1b1_out)
      out = self.conv1x1_0(out)
      out = res1b2_out + out
      out = self.relu(out)

      # Layer 2
      res2b1_out = self.res2_block1(out)
      res2b2_out = self.res2_block2(res2b1_out)
      out = self.conv1x1_1(out)
      out = res2b2_out + out
      out = self.relu(out)

      # Layer 3
      res3b1_out = self.res3_block1(out)
      res3b2_out = self.res3_block2(res3b1_out)
      out = self.conv1x1_2(out)
      out = res3b2_out + out
      out = self.relu(out)

      # Layer 4
      res4b1_out = self.res4_block1(out)
      res4b2_out = self.res4_block2(res4b1_out)
      out = self.conv1x1_3(out)
      out = res4b2_out + out
      out = self.relu(out)

      # Classification
      out = self.classifier(out)

      return out

model = to_device(ResNet18(3,100),device)

from torchsummary import summary
summary(model, (3, 32, 32))

@torch.no_grad()
def evaluate(model, val_loader):
    model.eval()
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)

def get_lr(optimizer):
    for param_group in optimizer.param_groups:
        return param_group['lr']

def fit(epochs, max_lr, model, train_loader, val_loader,
                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):
    torch.cuda.empty_cache()
    history = []

    # Set up cutom optimizer with weight decay
    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)
    # Set up one-cycle learning rate scheduler
    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs,
                                                steps_per_epoch=len(train_loader))

    for epoch in range(epochs):
        # Training Phase
        model.train()
        train_losses = []
        lrs = []
        for batch in train_loader:
            loss = model.training_step(batch)
            train_losses.append(loss)
            loss.backward()

            # Gradient clipping
            if grad_clip:
                nn.utils.clip_grad_value_(model.parameters(), grad_clip)

            optimizer.step()
            optimizer.zero_grad()

            # Record & update learning rate
            lrs.append(get_lr(optimizer))
            sched.step()

        # Validation phase
        result = evaluate(model, val_loader)
        result['train_loss'] = torch.stack(train_losses).mean().item()
        result['lrs'] = lrs
        model.epoch_end(epoch, result)
        history.append(result)
    return history

model.apply(init_weights)

history = [evaluate(model, valid_dl)]
history

epochs = 25
max_lr = 0.01
weight_decay = 1e-4
opt_func = torch.optim.SGD

"""## Results"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history += fit(epochs, max_lr, model, train_dl, valid_dl,
#                          weight_decay = weight_decay,
#                          opt_func = opt_func)

plot_accuracies(history)

plot_losses(history)

"""# ResNet18 - Transfer Learning (LR = 0.1, Adam Optim + Grad clip)"""

# Data transforms (normalization & data augmentation)
stats = ((0.5071, 0.4865, 0.449), (0.267, 0.256, 0.276))
train_tfms = tt.Compose([tt.RandomCrop(32, padding=4, padding_mode='reflect'),
                         tt.RandomHorizontalFlip(),
                         tt.ToTensor(),
                         tt.Normalize(*stats,inplace=True)])
valid_tfms = tt.Compose([tt.ToTensor(), tt.Normalize(*stats)])

# PyTorch datasets
train_ds = ImageFolder(data_dir+'/train', train_tfms)
valid_ds = ImageFolder(data_dir+'/test', valid_tfms)
test_ds = ImageFolder(data_dir+'/test', valid_tfms)

batch_size = 128

# PyTorch data loaders
train_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=2, pin_memory=True)
valid_dl = DataLoader(valid_ds, batch_size*2, num_workers=2, pin_memory=True)

device = get_default_device()
device

train_dl = DeviceDataLoader(train_dl, device)
valid_dl = DeviceDataLoader(valid_dl, device)

"""## Architecture"""

class CIFAR100Resnet18(ImageClassificationBase):
        def __init__(self, in_channels, num_classes):
                super().__init__()
                self.network = torchvision.models.resnet18(pretrained=True)
                num_ftrs = self.network.fc.in_features
                self.network.fc = nn.Linear(num_ftrs, 100)

        def forward(self, xb):
                return self.network(xb)

model = to_device(CIFAR100Resnet18(3,100),device)

from torchsummary import summary
summary(model, (3, 32, 32))

@torch.no_grad()
def evaluate(model, val_loader):
    model.eval()
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)

def get_lr(optimizer):
    for param_group in optimizer.param_groups:
        return param_group['lr']

def fit_one_cycle(epochs, max_lr, model, train_loader, val_loader,
                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):
    torch.cuda.empty_cache()
    history = []

    # Set up cutom optimizer with weight decay
    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)
    # Set up one-cycle learning rate scheduler
    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs,
                                                steps_per_epoch=len(train_loader))

    for epoch in range(epochs):
        # Training Phase
        model.train()
        train_losses = []
        lrs = []
        for batch in train_loader:
            loss = model.training_step(batch)
            train_losses.append(loss)
            loss.backward()

            # Gradient clipping
            if grad_clip:
                nn.utils.clip_grad_value_(model.parameters(), grad_clip)

            optimizer.step()
            optimizer.zero_grad()

            # Record & update learning rate
            lrs.append(get_lr(optimizer))
            sched.step()

        # Validation phase
        result = evaluate(model, val_loader)
        result['train_loss'] = torch.stack(train_losses).mean().item()
        result['lrs'] = lrs
        model.epoch_end(epoch, result)
        history.append(result)
    return history

model.apply(init_weights)

history = [evaluate(model, valid_dl)]
history

epochs = 25
max_lr = 0.1
grad_clip = 0.1
weight_decay = 1e-4
opt_func = torch.optim.Adam

"""## Results"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history += fit_one_cycle(epochs, max_lr, model, train_dl, valid_dl,
#                          weight_decay = weight_decay,
#                          grad_clip = grad_clip,
#                          opt_func = opt_func)

plot_accuracies(history)

plot_losses(history)



"""# ResNet 18 - Best version"""

# Data transforms (normalization & data augmentation)
stats = ((0.5071, 0.4865, 0.449), (0.267, 0.256, 0.276))
train_tfms = tt.Compose([tt.RandomCrop(32, padding=4, padding_mode='reflect'),
                         tt.RandomHorizontalFlip(),
                         tt.ToTensor(),
                         tt.Normalize(*stats,inplace=True)])
valid_tfms = tt.Compose([tt.ToTensor(),
                         tt.Normalize(*stats, inplace=True)])

# PyTorch datasets
train_ds = ImageFolder(data_dir+'/train', train_tfms)
valid_ds = ImageFolder(data_dir+'/test', valid_tfms)

batch_size = 256

# PyTorch data loaders
train_dl = DataLoader(train_ds, batch_size, shuffle=True)
valid_dl = DataLoader(valid_ds, batch_size*2, shuffle=False)

device = get_default_device()
device

train_dl = DeviceDataLoader(train_dl, device)
valid_dl = DeviceDataLoader(valid_dl, device)

"""## Architecture"""

class ResNet18(ImageClassificationBase):
    def __init__(self, in_channels, num_classes):
        super().__init__()

        # Initial layers
        self.conv_init = nn.Sequential(nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False),
                                       nn.BatchNorm2d(64),
                                       nn.ReLU(inplace=True),
                                       nn.MaxPool2d(kernel_size=3, stride=2, padding=1))

        self.relu = nn.ReLU()

        # Residual layer 1
        self.res1_block1 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64),
                                  nn.ReLU(),
                                  nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64))

        self.res1_block2 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64),
                                  nn.ReLU(),
                                  nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64))

        # Residual layer 2
        self.res2_block1 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        self.res2_block2 = nn.Sequential(nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        # 1x1 increase channel depth, downsample image
        self.conv3x3_1 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1, bias=False),
                                       nn.BatchNorm2d(128))


        # Residual layer 3
        self.res3_block1 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        self.res3_block2 = nn.Sequential(nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        # 1x1 increase channel depth, downsample image
        self.conv3x3_2 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1, bias=False),
                                       nn.BatchNorm2d(256))

        # Residual layer 4
        self.res4_block1 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        self.res4_block2 = nn.Sequential(nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        # 1x1 increase channel depth, downsample image
        self.conv3x3_3 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1, bias=False),
                                        nn.BatchNorm2d(512))

        # Classifier
        self.classifier = nn.Sequential(nn.AdaptiveAvgPool2d(output_size=1),
                                        nn.Flatten(start_dim=1, end_dim=-1),
                                        nn.Linear(in_features=512, out_features=100, bias=True))

    def forward(self, x):
      # Initial layers
      out = self.conv_init(x)

      # Layer 1
      res1b1_out = self.res1_block1(out)
      res1b2_out = self.res1_block2(res1b1_out)
      out = res1b2_out + out
      out = self.relu(out)

      # Layer 2
      res2b1_out = self.res2_block1(out)
      res2b2_out = self.res2_block2(res2b1_out)
      out = self.conv3x3_1(out)
      out = res2b2_out + out
      out = self.relu(out)

      # Layer 3
      res3b1_out = self.res3_block1(out)
      res3b2_out = self.res3_block2(res3b1_out)
      out = self.conv3x3_2(out)
      out = res3b2_out + out
      out = self.relu(out)

      # Layer 4
      res4b1_out = self.res4_block1(out)
      res4b2_out = self.res4_block2(res4b1_out)
      out = self.conv3x3_3(out)
      out = res4b2_out + out
      out = self.relu(out)

      # Classification
      out = self.classifier(out)

      return out

model = to_device(ResNet18(3,100),device)

from torchsummary import summary
summary(model, (3, 32, 32))

@torch.no_grad()
def evaluate(model, val_loader):
    model.eval()
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)

def get_lr(optimizer):
    for param_group in optimizer.param_groups:
        return param_group['lr']

def fit(epochs, max_lr, model, train_loader, val_loader,
                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):
    torch.cuda.empty_cache()
    history = []

    # Set up cutom optimizer with weight decay
    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)
    # Set up one-cycle learning rate scheduler
    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs,
                                                steps_per_epoch=len(train_loader))

    for epoch in range(epochs):
        # Training Phase
        model.train()
        train_losses = []
        lrs = []
        for batch in train_loader:
            loss = model.training_step(batch)
            train_losses.append(loss)
            loss.backward()

            # Gradient clipping
            if grad_clip:
                nn.utils.clip_grad_value_(model.parameters(), grad_clip)

            optimizer.step()
            optimizer.zero_grad()

            # Record & update learning rate
            lrs.append(get_lr(optimizer))
            sched.step()

        # Validation phase
        result = evaluate(model, val_loader)
        result['train_loss'] = torch.stack(train_losses).mean().item()
        result['lrs'] = lrs
        model.epoch_end(epoch, result)
        history.append(result)
    return history

model.apply(init_weights)

history = [evaluate(model, valid_dl)]
history

epochs = 25
max_lr = 0.01
grad_clip = 0.1
weight_decay = 1e-4
opt_func = torch.optim.Adam

"""## Results"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history += fit(epochs, max_lr, model, train_dl, valid_dl,
#                weight_decay = weight_decay,
#                grad_clip=grad_clip,
#                opt_func = opt_func)

plot_accuracies(history)

plot_losses(history)





"""# ResNet 18 - Best version w/dropout
## Conv 3x3, dropout, Adam + grad clip
"""

# Data transforms (normalization & data augmentation)
stats = ((0.5071, 0.4865, 0.449), (0.267, 0.256, 0.276))
train_tfms = tt.Compose([tt.RandomCrop(32, padding=4, padding_mode='reflect'),
                         tt.RandomHorizontalFlip(),
                         tt.ToTensor(),
                         tt.Normalize(*stats,inplace=True)])
valid_tfms = tt.Compose([tt.ToTensor(),
                         tt.Normalize(*stats, inplace=True)])

# PyTorch datasets
train_ds = ImageFolder(data_dir+'/train', train_tfms)
valid_ds = ImageFolder(data_dir+'/test', valid_tfms)

batch_size = 256

# PyTorch data loaders
train_dl = DataLoader(train_ds, batch_size, shuffle=True)
valid_dl = DataLoader(valid_ds, batch_size*2, shuffle=False)

device = get_default_device()
device

train_dl = DeviceDataLoader(train_dl, device)
valid_dl = DeviceDataLoader(valid_dl, device)

"""## Architecture"""

class ResNet18(ImageClassificationBase):
    def __init__(self, in_channels, num_classes):
        super().__init__()

        # Initial layers
        self.conv_init = nn.Sequential(nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False),
                                       nn.BatchNorm2d(64),
                                       nn.ReLU(inplace=True),
                                       nn.Dropout(p=0.2),
                                       nn.MaxPool2d(kernel_size=3, stride=2, padding=1))

        self.relu = nn.ReLU()

        # Residual layer 1
        self.res1_block1 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64),
                                  nn.ReLU(),
                                  nn.Dropout(p=0.2),
                                  nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64))

        self.res1_block2 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64),
                                  nn.ReLU(),
                                  nn.Dropout(p=0.2),
                                  nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(64))

        # Residual layer 2
        self.res2_block1 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Dropout(p=0.2),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        self.res2_block2 = nn.Sequential(nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Dropout(p=0.2),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        # 1x1 increase channel depth, downsample image
        self.conv3x3_1 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1, bias=False),
                                       nn.BatchNorm2d(128),
                                       nn.Dropout(p=0.2))


        # Residual layer 3
        self.res3_block1 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Dropout(p=0.2),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        self.res3_block2 = nn.Sequential(nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Dropout(p=0.2),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        # 1x1 increase channel depth, downsample image
        self.conv3x3_2 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1, bias=False),
                                       nn.BatchNorm2d(256),
                                       nn.Dropout(p=0.2))

        # Residual layer 4
        self.res4_block1 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Dropout(p=0.2),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        self.res4_block2 = nn.Sequential(nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Dropout(p=0.2),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        # 1x1 increase channel depth, downsample image
        self.conv3x3_3 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1, bias=False),
                                        nn.BatchNorm2d(512),
                                        nn.Dropout(p=0.2))

        # Classifier
        self.classifier = nn.Sequential(nn.AdaptiveAvgPool2d(output_size=1),
                                        nn.Flatten(start_dim=1, end_dim=-1),
                                        nn.Dropout(p=0.5),
                                        nn.Linear(in_features=512, out_features=100, bias=True))

    def forward(self, x):
      # Initial layers
      out = self.conv_init(x)

      # Layer 1
      res1b1_out = self.res1_block1(out)
      res1b2_out = self.res1_block2(res1b1_out)
      out = res1b2_out + out
      out = self.relu(out)

      # Layer 2
      res2b1_out = self.res2_block1(out)
      res2b2_out = self.res2_block2(res2b1_out)
      out = self.conv3x3_1(out)
      out = res2b2_out + out
      out = self.relu(out)

      # Layer 3
      res3b1_out = self.res3_block1(out)
      res3b2_out = self.res3_block2(res3b1_out)
      out = self.conv3x3_2(out)
      out = res3b2_out + out
      out = self.relu(out)

      # Layer 4
      res4b1_out = self.res4_block1(out)
      res4b2_out = self.res4_block2(res4b1_out)
      out = self.conv3x3_3(out)
      out = res4b2_out + out
      out = self.relu(out)

      # Classification
      out = self.classifier(out)

      return out

model = to_device(ResNet18(3,100),device)

from torchsummary import summary
summary(model, (3, 32, 32))

@torch.no_grad()
def evaluate(model, val_loader):
    model.eval()
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)

def get_lr(optimizer):
    for param_group in optimizer.param_groups:
        return param_group['lr']

def fit(epochs, max_lr, model, train_loader, val_loader,
                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):
    torch.cuda.empty_cache()
    history = []

    # Set up cutom optimizer with weight decay
    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)
    # Set up one-cycle learning rate scheduler
    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs,
                                                steps_per_epoch=len(train_loader))

    for epoch in range(epochs):
        # Training Phase
        model.train()
        train_losses = []
        lrs = []
        for batch in train_loader:
            loss = model.training_step(batch)
            train_losses.append(loss)
            loss.backward()

            # Gradient clipping
            if grad_clip:
                nn.utils.clip_grad_value_(model.parameters(), grad_clip)

            optimizer.step()
            optimizer.zero_grad()

            # Record & update learning rate
            lrs.append(get_lr(optimizer))
            sched.step()

        # Validation phase
        result = evaluate(model, val_loader)
        result['train_loss'] = torch.stack(train_losses).mean().item()
        result['lrs'] = lrs
        model.epoch_end(epoch, result)
        history.append(result)
    return history

model.apply(init_weights)

history = [evaluate(model, valid_dl)]
history

epochs = 25
max_lr = 0.01
grad_clip = 0.1
weight_decay = 1e-4
opt_func = torch.optim.Adam

"""## Results"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history += fit(epochs, max_lr, model, train_dl, valid_dl,
#                weight_decay = weight_decay,
#                grad_clip=grad_clip,
#                opt_func = opt_func)

plot_accuracies(history)

plot_losses(history)





# Data transforms (normalization & data augmentation)
stats = ((0.5071, 0.4865, 0.449), (0.267, 0.256, 0.276))
train_tfms = tt.Compose([tt.RandomCrop(32, padding=4, padding_mode='reflect'),
                         tt.RandomHorizontalFlip(),
                         tt.ToTensor(),
                         tt.Normalize(*stats,inplace=True)])
valid_tfms = tt.Compose([tt.ToTensor(),
                         tt.Normalize(*stats, inplace=True)])

# PyTorch datasets
train_ds = ImageFolder(data_dir+'/train', train_tfms)
valid_ds = ImageFolder(data_dir+'/test', valid_tfms)

batch_size = 256

# PyTorch data loaders
train_dl = DataLoader(train_ds, batch_size, shuffle=True)
valid_dl = DataLoader(valid_ds, batch_size*2, shuffle=False)

device = get_default_device()
device

train_dl = DeviceDataLoader(train_dl, device)
valid_dl = DeviceDataLoader(valid_dl, device)

"""# Wide ResNet 18 - Best version w/dropout"""

# Data transforms (normalization & data augmentation)
stats = ((0.5071, 0.4865, 0.449), (0.267, 0.256, 0.276))
train_tfms = tt.Compose([tt.RandomCrop(32, padding=4, padding_mode='reflect'),
                         tt.RandomHorizontalFlip(),
                         tt.ToTensor(),
                         tt.Normalize(*stats,inplace=True)])
valid_tfms = tt.Compose([tt.ToTensor(),
                         tt.Normalize(*stats, inplace=True)])

# PyTorch datasets
train_ds = ImageFolder(data_dir+'/train', train_tfms)
valid_ds = ImageFolder(data_dir+'/test', valid_tfms)

batch_size = 256

# PyTorch data loaders
train_dl = DataLoader(train_ds, batch_size, shuffle=True)
valid_dl = DataLoader(valid_ds, batch_size*2, shuffle=False)

device = get_default_device()
device

train_dl = DeviceDataLoader(train_dl, device)
valid_dl = DeviceDataLoader(valid_dl, device)

"""## Architecture"""

class ResNet18(ImageClassificationBase):
    def __init__(self, in_channels, num_classes):
        super().__init__()

        # Initial layers
        self.conv_init = nn.Sequential(nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False),
                                       nn.BatchNorm2d(64),
                                       nn.ReLU(inplace=True),
                                       nn.Dropout(p=0.2),
                                       nn.MaxPool2d(kernel_size=3, stride=2, padding=1))

        self.relu = nn.ReLU()

        # Residual layer 1
        self.res1_block1 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Dropout(p=0.2),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        self.res1_block2 = nn.Sequential(nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Dropout(p=0.2),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        # 1x1 increase channel depth, downsample image
        self.conv3x3_0 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                       nn.BatchNorm2d(128),
                                       nn.Dropout(p=0.2))

        # Residual layer 2
        self.res2_block1 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Dropout(p=0.2),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        self.res2_block2 = nn.Sequential(nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Dropout(p=0.2),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        # 1x1 increase channel depth, downsample image
        self.conv3x3_1 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1, bias=False),
                                       nn.BatchNorm2d(256),
                                       nn.Dropout(p=0.2))


        # Residual layer 3
        self.res3_block1 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Dropout(p=0.2),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        self.res3_block2 = nn.Sequential(nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Dropout(p=0.2),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        # 1x1 increase channel depth, downsample image
        self.conv3x3_2 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1, bias=False),
                                       nn.BatchNorm2d(512),
                                       nn.Dropout(p=0.2))

        # Residual layer 4
        self.res4_block1 = nn.Sequential(nn.Conv2d(512, 1024, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(1024),
                                  nn.ReLU(),
                                  nn.Dropout(p=0.2),
                                  nn.Conv2d(1024, 1024, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(1024))

        self.res4_block2 = nn.Sequential(nn.Conv2d(1024, 1024, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(1024),
                                  nn.ReLU(),
                                  nn.Dropout(p=0.2),
                                  nn.Conv2d(1024, 1024, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(1024))

        # 1x1 increase channel depth, downsample image
        self.conv3x3_3 = nn.Sequential(nn.Conv2d(512, 1024, kernel_size=3, stride=2, padding=1, bias=False),
                                        nn.BatchNorm2d(1024),
                                        nn.Dropout(p=0.2))

        # Classifier
        self.classifier = nn.Sequential(nn.AdaptiveAvgPool2d(output_size=1),
                                        nn.Flatten(start_dim=1, end_dim=-1),
                                        nn.Dropout(p=0.5),
                                        nn.Linear(in_features=1024, out_features=100, bias=True))

    def forward(self, x):
      # Initial layers
      out = self.conv_init(x)

      # Layer 1
      res1b1_out = self.res1_block1(out)
      res1b2_out = self.res1_block2(res1b1_out)
      out = self.conv3x3_0(out)
      out = res1b2_out + out
      out = self.relu(out)

      # Layer 2
      res2b1_out = self.res2_block1(out)
      res2b2_out = self.res2_block2(res2b1_out)
      out = self.conv3x3_1(out)
      out = res2b2_out + out
      out = self.relu(out)

      # Layer 3
      res3b1_out = self.res3_block1(out)
      res3b2_out = self.res3_block2(res3b1_out)
      out = self.conv3x3_2(out)
      out = res3b2_out + out
      out = self.relu(out)

      # Layer 4
      res4b1_out = self.res4_block1(out)
      res4b2_out = self.res4_block2(res4b1_out)
      out = self.conv3x3_3(out)
      out = res4b2_out + out
      out = self.relu(out)

      # Classification
      out = self.classifier(out)

      return out

model = to_device(ResNet18(3,100),device)

from torchsummary import summary
summary(model, (3, 32, 32))

@torch.no_grad()
def evaluate(model, val_loader):
    model.eval()
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)

def get_lr(optimizer):
    for param_group in optimizer.param_groups:
        return param_group['lr']

def fit(epochs, max_lr, model, train_loader, val_loader,
                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):
    torch.cuda.empty_cache()
    history = []

    # Set up cutom optimizer with weight decay
    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)
    # Set up one-cycle learning rate scheduler
    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs,
                                                steps_per_epoch=len(train_loader))

    for epoch in range(epochs):
        # Training Phase
        model.train()
        train_losses = []
        lrs = []
        for batch in train_loader:
            loss = model.training_step(batch)
            train_losses.append(loss)
            loss.backward()

            # Gradient clipping
            if grad_clip:
                nn.utils.clip_grad_value_(model.parameters(), grad_clip)

            optimizer.step()
            optimizer.zero_grad()

            # Record & update learning rate
            lrs.append(get_lr(optimizer))
            sched.step()

        # Validation phase
        result = evaluate(model, val_loader)
        result['train_loss'] = torch.stack(train_losses).mean().item()
        result['lrs'] = lrs
        model.epoch_end(epoch, result)
        history.append(result)
    return history

model.apply(init_weights)

history = [evaluate(model, valid_dl)]
history

epochs = 25
max_lr = 0.01
grad_clip = 0.1
weight_decay = 1e-4
opt_func = torch.optim.Adam

"""## Results"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history += fit(epochs, max_lr, model, train_dl, valid_dl,
#                weight_decay = weight_decay,
#                grad_clip=grad_clip,
#                opt_func = opt_func)

plot_accuracies(history)

plot_losses(history)



"""# Wide ResNet 18 - Best version"""

# Data transforms (normalization & data augmentation)
stats = ((0.5071, 0.4865, 0.449), (0.267, 0.256, 0.276))
train_tfms = tt.Compose([tt.RandomCrop(32, padding=4, padding_mode='reflect'),
                         tt.RandomHorizontalFlip(),
                         tt.ToTensor(),
                         tt.Normalize(*stats,inplace=True)])
valid_tfms = tt.Compose([tt.ToTensor(),
                         tt.Normalize(*stats, inplace=True)])

# PyTorch datasets
train_ds = ImageFolder(data_dir+'/train', train_tfms)
valid_ds = ImageFolder(data_dir+'/test', valid_tfms)

batch_size = 256

# PyTorch data loaders
train_dl = DataLoader(train_ds, batch_size, shuffle=True)
valid_dl = DataLoader(valid_ds, batch_size*2, shuffle=False)

device = get_default_device()
device

train_dl = DeviceDataLoader(train_dl, device)
valid_dl = DeviceDataLoader(valid_dl, device)

"""## Architecture"""

class ResNet18(ImageClassificationBase):
    def __init__(self, in_channels, num_classes):
        super().__init__()

        # Initial layers
        self.conv_init = nn.Sequential(nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False),
                                       nn.BatchNorm2d(64),
                                       nn.ReLU(inplace=True),
                                       nn.MaxPool2d(kernel_size=3, stride=2, padding=1))

        self.relu = nn.ReLU()

        # Residual layer 1
        self.res1_block1 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        self.res1_block2 = nn.Sequential(nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128),
                                  nn.ReLU(),
                                  nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(128))

        # 1x1 increase channel depth, downsample image
        self.conv3x3_0 = nn.Sequential(nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1, bias=False),
                                       nn.BatchNorm2d(128))

        # Residual layer 2
        self.res2_block1 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        self.res2_block2 = nn.Sequential(nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256),
                                  nn.ReLU(),
                                  nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(256))

        # 1x1 increase channel depth, downsample image
        self.conv3x3_1 = nn.Sequential(nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1, bias=False),
                                       nn.BatchNorm2d(256))


        # Residual layer 3
        self.res3_block1 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        self.res3_block2 = nn.Sequential(nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512),
                                  nn.ReLU(),
                                  nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(512))

        # 1x1 increase channel depth, downsample image
        self.conv3x3_2 = nn.Sequential(nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1, bias=False),
                                       nn.BatchNorm2d(512))

        # Residual layer 4
        self.res4_block1 = nn.Sequential(nn.Conv2d(512, 1024, kernel_size=3, stride=2, padding=1, bias=False),
                                  nn.BatchNorm2d(1024),
                                  nn.ReLU(),
                                  nn.Conv2d(1024, 1024, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(1024))

        self.res4_block2 = nn.Sequential(nn.Conv2d(1024, 1024, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(1024),
                                  nn.ReLU(),
                                  nn.Conv2d(1024, 1024, kernel_size=3, stride=1, padding=1, bias=False),
                                  nn.BatchNorm2d(1024))

        # 1x1 increase channel depth, downsample image
        self.conv3x3_3 = nn.Sequential(nn.Conv2d(512, 1024, kernel_size=3, stride=2, padding=1, bias=False),
                                        nn.BatchNorm2d(1024))

        # Classifier
        self.classifier = nn.Sequential(nn.AdaptiveAvgPool2d(output_size=1),
                                        nn.Flatten(start_dim=1, end_dim=-1),
                                        nn.Linear(in_features=1024, out_features=100, bias=True))

    def forward(self, x):
      # Initial layers
      out = self.conv_init(x)

      # Layer 1
      res1b1_out = self.res1_block1(out)
      res1b2_out = self.res1_block2(res1b1_out)
      out = self.conv3x3_0(out)
      out = res1b2_out + out
      out = self.relu(out)

      # Layer 2
      res2b1_out = self.res2_block1(out)
      res2b2_out = self.res2_block2(res2b1_out)
      out = self.conv3x3_1(out)
      out = res2b2_out + out
      out = self.relu(out)

      # Layer 3
      res3b1_out = self.res3_block1(out)
      res3b2_out = self.res3_block2(res3b1_out)
      out = self.conv3x3_2(out)
      out = res3b2_out + out
      out = self.relu(out)

      # Layer 4
      res4b1_out = self.res4_block1(out)
      res4b2_out = self.res4_block2(res4b1_out)
      out = self.conv3x3_3(out)
      out = res4b2_out + out
      out = self.relu(out)

      # Classification
      out = self.classifier(out)

      return out

model = to_device(ResNet18(3,100),device)

from torchsummary import summary
summary(model, (3, 32, 32))

@torch.no_grad()
def evaluate(model, val_loader):
    model.eval()
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)

def get_lr(optimizer):
    for param_group in optimizer.param_groups:
        return param_group['lr']

def fit(epochs, max_lr, model, train_loader, val_loader,
                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):
    torch.cuda.empty_cache()
    history = []

    # Set up cutom optimizer with weight decay
    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)
    # Set up one-cycle learning rate scheduler
    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs,
                                                steps_per_epoch=len(train_loader))

    for epoch in range(epochs):
        # Training Phase
        model.train()
        train_losses = []
        lrs = []
        for batch in train_loader:
            loss = model.training_step(batch)
            train_losses.append(loss)
            loss.backward()

            # Gradient clipping
            if grad_clip:
                nn.utils.clip_grad_value_(model.parameters(), grad_clip)

            optimizer.step()
            optimizer.zero_grad()

            # Record & update learning rate
            lrs.append(get_lr(optimizer))
            sched.step()

        # Validation phase
        result = evaluate(model, val_loader)
        result['train_loss'] = torch.stack(train_losses).mean().item()
        result['lrs'] = lrs
        model.epoch_end(epoch, result)
        history.append(result)
    return history

model.apply(init_weights)

history = [evaluate(model, valid_dl)]
history

epochs = 25
max_lr = 0.01
grad_clip = 0.1
weight_decay = 1e-4
opt_func = torch.optim.Adam

"""## Results"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history += fit(epochs, max_lr, model, train_dl, valid_dl,
#                weight_decay = weight_decay,
#                grad_clip=grad_clip,
#                opt_func = opt_func)

plot_accuracies(history)

plot_losses(history)



# ResNet 100

class Resnet100(ImageClassificationBase):
        def __init__(self, in_channels, num_classes):
                super().__init__()
                self.network = torchvision.models.resnet100()
                num_ftrs = self.network.fc.in_features
                self.network.fc = nn.Linear(num_ftrs, 100)

        def forward(self, xb):
                return self.network(xb)

model = to_device(ResNet100(3,100),device)
from torchsummary import summary
summary(model, (3, 32, 32))